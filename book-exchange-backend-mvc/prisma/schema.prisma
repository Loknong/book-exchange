generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ConnectionChecks {
  id             Int    @id @default(autoincrement())
  connectionType String
  detail         String
}

model Genres {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  books Books[]
}

model Users {
  id                Int                     @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String                  @unique
  username          String                  @unique
  password          String
  credit            Int                     @default(0)
  token             String?
  pictureId         Int?
  addressId         Int?
  role              UserRole                @default(USER)
  isLoggedIn        Boolean                 @default(false)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  expiredAt         DateTime                @updatedAt
  books             Books[]
  notifications     Notifications[]
  offersOffered     Offers[]                @relation("OffersOfferedBy")
  offersReceived    Offers[]                @relation("OffersOfferedTo")
  payments          Payments[]
  transactionStatus UserTransactionStatus[]
  addresses         UserAddress[]
  profilePictures   UserProfilePictures[]
  logs              Logs[]
}

enum UserRole {
  ADMIN
  USER
}

model Books {
  id          Int          @id @default(autoincrement())
  title       String
  author      String?
  genreId     Int
  genre       Genres       @relation(fields: [genreId], references: [id], onDelete: Cascade)
  views       Int          @default(0)
  condition   String
  description String?
  ownerId     Int
  owner       Users        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  status      BookStatus   @default(PUBLIC)
  bookImageId Int          @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  images      BookImages[]
  offers      Offers[]
}

model BookImages {
  id        Int      @id @default(autoincrement())
  bookId    Int
  book      Books    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  name      String?
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
}

model Notifications {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String?
  createdAt DateTime @default(now())
}

model Offers {
  id           Int            @id @default(autoincrement())
  bookId       Int
  book         Books          @relation(fields: [bookId], references: [id], onDelete: Cascade)
  offeredById  Int
  offeredBy    Users          @relation("OffersOfferedBy", fields: [offeredById], references: [id], onDelete: Cascade)
  offeredToId  Int
  offeredTo    Users          @relation("OffersOfferedTo", fields: [offeredToId], references: [id], onDelete: Cascade)
  status       OfferStatus    @default(PENDING)
  details      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  transactions Transactions[]
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Transactions {
  id                    Int                     @id @default(autoincrement())
  offerId               Int
  offer                 Offers                  @relation(fields: [offerId], references: [id], onDelete: Cascade)
  status                TransactionStatus       @default(PENDING)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  payments              Payments[]
  userTransactionStatus UserTransactionStatus[]
  adminManagement       AdminManagement?
  transactionDetails    TransactionDetails[]
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  CANCELED
  PAYMENT_PENDING
  PAYMENT_IN_PROGRESS
  PAYMENT_COMPLETED
  PAYMENT_FAILED
  ADDRESS_SENT
  BOOK_RECEIVED
  SEND_BOOK_COMPLETED
  SEND_BOOK_TO_USER
  COMPLETED
}

model Payments {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionId Int
  transaction   Transactions  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  evidence      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model UserTransactionStatus {
  id            Int            @id @default(autoincrement())
  transactionId Int
  transaction   Transactions   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  userId        Int
  user          Users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        UserTranStatus @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

enum UserTranStatus {
  PENDING
  CONFIRMED
  CANCELED
  USER_PAYMENT_PENDING
  WAITING_CHECK_EVIDENCE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  RECEIVED_ADDRESS
  SENDING_BOOK
  SEND_BOOK_COMPLETED
  WAITING_RECEIVED_BOOK
  RECEIVED_BOOK
}

model AdminManagement {
  id            Int          @id @default(autoincrement())
  transactionId Int          @unique
  transaction   Transactions @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  status        AdminStatus
  details       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
}

enum AdminStatus {
  CHECKING_PAYMENT_EVIDENCE
  CHECKED_PAYMENT_COMPLETED
  SENDING_ADDRESS
  WAITING_BOOK
  RECEIVED_BOOK
  SENDING_BOOK_TO_USER
  COMPLETED
}

model Logs {
  id        Int      @id @default(autoincrement())
  section   String
  level     String
  message   String
  createdAt DateTime @default(now())
  userId    Int?
  user      Users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LogSettings {
  id      Int     @id @default(autoincrement())
  section String  @unique
  enabled Boolean @default(true)
  level   String  @default("DEBUG")
}

model StatusHistory {
  id             Int            @id @default(autoincrement())
  referenceTable ReferenceTable
  referenceId    Int
  status         String
  createdAt      DateTime       @default(now())
}

enum ReferenceTable {
  OFFERS
  TRANSACTIONS
  USER_TRANSACTION_STATUS
  PAYMENTS
  ADMIN_MANAGEMENT
}

model UserAddress {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  houseNumber String
  village     String?
  street      String?
  subdistrict String
  district    String
  province    String
  postalCode  String
  country     String   @default("Thailand")
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserProfilePictures {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  createdAt DateTime @default(now())
  isActive  Boolean  @default(false)
  isDeleted Boolean  @default(false)
}

model TransactionDetails {
  id                              Int          @id @default(autoincrement())
  transactionId                   Int
  transaction                     Transactions @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  offeredByAddress                String
  offeredToAddress                String
  offeredByCode                   String
  offeredToCode                   String
  offeredBySendingEvidence        String?
  offeredToSendingEvidence        String?
  uniqueKey                       String?      @unique
  adminSendingEvidenceToOfferedBy String?
  adminSendingEvidenceToOfferedTo String?
  createdAt                       DateTime     @default(now())
}

enum BookStatus {
  PUBLIC
  PRIVATE
}
